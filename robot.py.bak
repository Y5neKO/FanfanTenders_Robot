import argparse
import json
import os

import requests

# 用于获取数据的完整请求头
headers = {
    "Connection": "keep-alive",
    "Pragma": "no-cache",
    "sec-ch-ua": 'Google Chrome";v="123", "Not:A-Brand";v="8", "Chromium";v="123',
    "Cache-Control": "no-cache",
    "Auth-Type": "PAAS",
    "sec-ch-ua-mobile": "?1",
    "Env": "WEB",
    "Client-Version": "0",
    "User-Agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Mobile Safari/537.36",
    "content-type": "application/json;charset=UTF-8",
    "X-Sourceid": "f790b1138142c666731aae015daa292b",
    "X-Timestamp": "1712652720",
    "X-Requested-With": "XMLHttpRequest",
    "Api-Version": "0",
    "User-Info": "uc_id=;uc_appid=585;acc_token=10737291d9cf19fe62d918b8925bf7145f68f84cb31ec7822ca806e851f13960;acc_id=336216333;login_id=336216333:0;device_type=bid-h5;paas_appid=16;version=12;login_type=passport",
    "sec-ch-ua-platform": '"Android"',
    "Cookie": 'BIDUPSID=4585572F218C4938D29F8D8EA68CB65D; PSTM=1711994232; BAIDUID=4585572F218C493814DE3C6C7E13DD03:FG=1; H_PS_PSSID=40300_40381_40415_40446_40458_39661_40506_40488_40511_40397_60027_60037_60046_60093; H_WISE_SIDS=40300_40381_40415_40446_40458_39661_40506_40488_40511_40397_60027_60037_60046_60093; BDUSS=05JSjlSdGV6eGJ-YTJ1QzBEaTl1UkR4OHIyTXlndXpaNnFKdzJ-T0hiZ0lQRHhtSVFBQUFBJCQAAAAAAAAAAAEAAACcu62dtM3X09PoioVpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAivFGYIrxRmU; BDUSS_BFESS=05JSjlSdGV6eGJ-YTJ1QzBEaTl1UkR4OHIyTXlndXpaNnFKdzJ-T0hiZ0lQRHhtSVFBQUFBJCQAAAAAAAAAAAEAAACcu62dtM3X09PoioVpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAivFGYIrxRmU; BA_HECTOR=0k000k0g0g8k2lakak2h258h8a80qc1j19tgs1s; BAIDUID_BFESS=4585572F218C493814DE3C6C7E13DD03:FG=1; sajssdk_2015_cross_new_user=1; ZFY=YMw1FdPFqQMgcv07BYZelCq:AMxruooABtQzwYJcsHbw:C; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2218ec1e15e261eb7-09d6c5eaca21928-26001a51-2073600-18ec1e15e272677%22%2C%22first_id%22%3A%22%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%2C%22%24latest_referrer%22%3A%22%22%7D%2C%22identities%22%3A%22eyIkaWRlbnRpdHlfY29va2llX2lkIjoiMThlYzFlMTVlMjYxZWI3LTA5ZDZjNWVhY2EyMTkyOC0yNjAwMWE1MS0yMDczNjAwLTE4ZWMxZTE1ZTI3MjY3NyJ9%22%2C%22history_login_id%22%3A%7B%22name%22%3A%22%22%2C%22value%22%3A%22%22%7D%2C%22%24device_id%22%3A%2218ec1e15e261eb7-09d6c5eaca21928-26001a51-2073600-18ec1e15e272677%22%7D; Hm_lvt_8cfca2ee1c078aaed86e031c3eb09486=1712652130; Hm_lpvt_8cfca2ee1c078aaed86e031c3eb09486=1712652339; login_id=336216333:0; device_type=bid-h5; acc_id=336216333; GAT_QRNIGOL_FFA=cf1d3d9b1a82d2f87d633bd8a03423; RT=\'z=1&dm=baidu.com&si=f0df3e48-a373-4245-8565-86822ccafd52&ss=lus4utfe&sl=c&tt=evh&bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&ld=alz7"'

}

# 用于获取四川招标总数量的请求包
count_data = '{"query":{"entName":"","enterpriseId":"","keyword":"","noticeTypes":[],"informationTypes":[],"areaQuery":{"dicts":[{"code":"510000","children":[]}]},"startTime":"2024-04-09 00:00:00","endTime":"","matchType":"term","tenderPrincipalTypeCodes":[],"matchFields":[],"sortType":"desc","biddingAcquireTimeItem":"","tenderTimeItem":"","openBidingTimeItem":"","fromBudget":"","toBudget":"","fromWinnerAmount":"","toWinnerAmount":"","contactFilterType":"","agencyPrincipalFilterType":"","attachmentFilterType":"","winnerFilterType":"","tenderItemIndustries":[],"tenderItemCategories":[],"pageNum":3,"pageSize":10,"platform":"h5"}}'

# 用于获取四川招标详细信息的请求包
content_data = {
    "query": {
        "entName": "",
        "enterpriseId": "",
        "keyword": "",
        "noticeTypes": [],
        "informationTypes": [],
        "areaQuery": {
            "dicts": [
                {
                    "code": "510000",
                    "children": []
                }
            ]
        },
        "startTime": "2024-04-09 00:00:00",
        "endTime": "",
        "matchType": "term",
        "tenderPrincipalTypeCodes": [],
        "matchFields": [],
        "sortType": "desc",
        "biddingAcquireTimeItem": "",
        "tenderTimeItem": "",
        "openBidingTimeItem": "",
        "fromBudget": "",
        "toBudget": "",
        "fromWinnerAmount": "",
        "toWinnerAmount": "",
        "contactFilterType": "",
        "agencyPrincipalFilterType": "",
        "attachmentFilterType": "",
        "winnerFilterType": "",
        "tenderItemIndustries": [],
        "tenderItemCategories": [],
        "pageNum": 1,
        "pageSize": 100,
        "platform": "h5"
    }
}


def run():
    """
    爬取最新数据
    :return:
    """
    count_response = requests.post("https://xunbiaobao.baidu.com/crm/web/bid/xbb/na/bidding/search/api/search/count",
                                   headers=headers, data=count_data)
    count_dict = json.loads(count_response.text)
    count_value = count_dict['data']
    print("四川全地区当前招标总数：" + str(count_value))

    all_data = []
    # 按照目标需求的格式化处理json, 否则会报错
    formated_content_data = str(content_data).replace("'", "\"").replace(", ", ",").replace(": ", ":")
    for i in range(1, int(count_value) // 100 + 1):
        try:
            print("当前请求第{}页".format(i))
            content_response = requests.post("https://xunbiaobao.baidu.com/crm/web/bid/xbb/bidding/search/api/search",
                                             headers=headers,
                                             data=formated_content_data.replace('"pageNum":1',
                                                                                '"pageNum":{}'.format(i)))
        except:
            print("第{}页请求失败,请求重试,若再次失败则跳过".format(i))
            content_response = requests.post("https://xunbiaobao.baidu.com/crm/web/bid/xbb/bidding/search/api/search",
                                             headers=headers,
                                             data=formated_content_data.replace('"pageNum":1',
                                                                                '"pageNum":{}'.format(i)))
            continue
        # print(content_response.json())
        all_data.append(content_response.json())

    # 将数据输出到JSON文件
    with open('all_data.json', 'w', encoding='utf-8') as f:
        json.dump(all_data, f, indent=4, ensure_ascii=False)


def analys():
    """
    从爬取的数据文件中解析所有的详细招标数据
    :return:
    """
    all_detail = []

    with open('all_data.json', 'r', encoding='utf-8') as f:
        all_data = json.load(f)
    page_num = 1
    for page in all_data:
        print(f"正在整理第{page_num}页")
        page_num += 1
        for data in page['data']['dataList']:
            all_detail.append(data)

    with open('all_detail.json', 'w', encoding='utf-8') as f:
        json.dump(all_detail, f, indent=4, ensure_ascii=False)


def show_tenders():
    with open("all_detail.json", "r", encoding='utf-8') as f:
        tenders_data = json.load(f)
    print_centered("====")
    for tenders in tenders_data:
        if tenders['projectNo'] is None:
            tenders['projectNo'] = "暂无"
        if tenders['budget'] is None:
            tenders['budget'] = "暂无"
        if tenders['winnerAmount'] is None:
            tenders['winnerAmount'] = "暂无"
        print("id: " + tenders['id'])
        print("title: " + tenders['title'])
        print("项目编号: " + tenders['projectNo'])
        print("预算: " + str(tenders['budget']) + "元")
        print("中标: " + str(tenders['winnerAmount']) + "元")
        print_centered("====")


def print_centered(text):
    """
    打印分割线
    @param text: 居中文字
    @return:
    """
    terminal_width = os.get_terminal_size().columns
    text_width = len(text)
    left_padding = (terminal_width - text_width - 10) // 2  # 10是因为"----------"占用了10个字符
    print('=' * left_padding + text + '=' * left_padding)


if __name__ == '__main__':
    parse = argparse.ArgumentParser(description="番番寻标宝数据爬取", formatter_class=argparse.RawTextHelpFormatter)
    parse.add_argument("-r", "--run", action="store_true", help="爬取最新数据到all_data.json文件")
    parse.add_argument("-a", "--analys", action="store_true", help="从all_data.json解析数据到all_detail.json")
    parse.add_argument("-s", "--show-tenders", action="store_true", help="展示所有投标详细信息")

    args = parse.parse_args()

    if args.run is True:
        run()

    if args.analys is True:
        analys()

    if args.show_tenders is True:
        show_tenders()